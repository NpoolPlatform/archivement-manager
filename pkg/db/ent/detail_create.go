// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/archivement-manager/pkg/db/ent/detail"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// DetailCreate is the builder for creating a Detail entity.
type DetailCreate struct {
	config
	mutation *DetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dc *DetailCreate) SetCreatedAt(u uint32) *DetailCreate {
	dc.mutation.SetCreatedAt(u)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DetailCreate) SetNillableCreatedAt(u *uint32) *DetailCreate {
	if u != nil {
		dc.SetCreatedAt(*u)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DetailCreate) SetUpdatedAt(u uint32) *DetailCreate {
	dc.mutation.SetUpdatedAt(u)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DetailCreate) SetNillableUpdatedAt(u *uint32) *DetailCreate {
	if u != nil {
		dc.SetUpdatedAt(*u)
	}
	return dc
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DetailCreate) SetDeletedAt(u uint32) *DetailCreate {
	dc.mutation.SetDeletedAt(u)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DetailCreate) SetNillableDeletedAt(u *uint32) *DetailCreate {
	if u != nil {
		dc.SetDeletedAt(*u)
	}
	return dc
}

// SetAppID sets the "app_id" field.
func (dc *DetailCreate) SetAppID(u uuid.UUID) *DetailCreate {
	dc.mutation.SetAppID(u)
	return dc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (dc *DetailCreate) SetNillableAppID(u *uuid.UUID) *DetailCreate {
	if u != nil {
		dc.SetAppID(*u)
	}
	return dc
}

// SetUserID sets the "user_id" field.
func (dc *DetailCreate) SetUserID(u uuid.UUID) *DetailCreate {
	dc.mutation.SetUserID(u)
	return dc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dc *DetailCreate) SetNillableUserID(u *uuid.UUID) *DetailCreate {
	if u != nil {
		dc.SetUserID(*u)
	}
	return dc
}

// SetGoodID sets the "good_id" field.
func (dc *DetailCreate) SetGoodID(u uuid.UUID) *DetailCreate {
	dc.mutation.SetGoodID(u)
	return dc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (dc *DetailCreate) SetNillableGoodID(u *uuid.UUID) *DetailCreate {
	if u != nil {
		dc.SetGoodID(*u)
	}
	return dc
}

// SetOrderID sets the "order_id" field.
func (dc *DetailCreate) SetOrderID(u uuid.UUID) *DetailCreate {
	dc.mutation.SetOrderID(u)
	return dc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (dc *DetailCreate) SetNillableOrderID(u *uuid.UUID) *DetailCreate {
	if u != nil {
		dc.SetOrderID(*u)
	}
	return dc
}

// SetPaymentID sets the "payment_id" field.
func (dc *DetailCreate) SetPaymentID(u uuid.UUID) *DetailCreate {
	dc.mutation.SetPaymentID(u)
	return dc
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (dc *DetailCreate) SetNillablePaymentID(u *uuid.UUID) *DetailCreate {
	if u != nil {
		dc.SetPaymentID(*u)
	}
	return dc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (dc *DetailCreate) SetCoinTypeID(u uuid.UUID) *DetailCreate {
	dc.mutation.SetCoinTypeID(u)
	return dc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (dc *DetailCreate) SetNillableCoinTypeID(u *uuid.UUID) *DetailCreate {
	if u != nil {
		dc.SetCoinTypeID(*u)
	}
	return dc
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (dc *DetailCreate) SetPaymentCoinTypeID(u uuid.UUID) *DetailCreate {
	dc.mutation.SetPaymentCoinTypeID(u)
	return dc
}

// SetNillablePaymentCoinTypeID sets the "payment_coin_type_id" field if the given value is not nil.
func (dc *DetailCreate) SetNillablePaymentCoinTypeID(u *uuid.UUID) *DetailCreate {
	if u != nil {
		dc.SetPaymentCoinTypeID(*u)
	}
	return dc
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (dc *DetailCreate) SetPaymentCoinUsdCurrency(d decimal.Decimal) *DetailCreate {
	dc.mutation.SetPaymentCoinUsdCurrency(d)
	return dc
}

// SetNillablePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field if the given value is not nil.
func (dc *DetailCreate) SetNillablePaymentCoinUsdCurrency(d *decimal.Decimal) *DetailCreate {
	if d != nil {
		dc.SetPaymentCoinUsdCurrency(*d)
	}
	return dc
}

// SetUnits sets the "units" field.
func (dc *DetailCreate) SetUnits(u uint32) *DetailCreate {
	dc.mutation.SetUnits(u)
	return dc
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (dc *DetailCreate) SetNillableUnits(u *uint32) *DetailCreate {
	if u != nil {
		dc.SetUnits(*u)
	}
	return dc
}

// SetAmount sets the "amount" field.
func (dc *DetailCreate) SetAmount(d decimal.Decimal) *DetailCreate {
	dc.mutation.SetAmount(d)
	return dc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (dc *DetailCreate) SetNillableAmount(d *decimal.Decimal) *DetailCreate {
	if d != nil {
		dc.SetAmount(*d)
	}
	return dc
}

// SetUsdAmount sets the "usd_amount" field.
func (dc *DetailCreate) SetUsdAmount(d decimal.Decimal) *DetailCreate {
	dc.mutation.SetUsdAmount(d)
	return dc
}

// SetNillableUsdAmount sets the "usd_amount" field if the given value is not nil.
func (dc *DetailCreate) SetNillableUsdAmount(d *decimal.Decimal) *DetailCreate {
	if d != nil {
		dc.SetUsdAmount(*d)
	}
	return dc
}

// SetCommission sets the "commission" field.
func (dc *DetailCreate) SetCommission(d decimal.Decimal) *DetailCreate {
	dc.mutation.SetCommission(d)
	return dc
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (dc *DetailCreate) SetNillableCommission(d *decimal.Decimal) *DetailCreate {
	if d != nil {
		dc.SetCommission(*d)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DetailCreate) SetID(u uuid.UUID) *DetailCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DetailCreate) SetNillableID(u *uuid.UUID) *DetailCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// Mutation returns the DetailMutation object of the builder.
func (dc *DetailCreate) Mutation() *DetailMutation {
	return dc.mutation
}

// Save creates the Detail in the database.
func (dc *DetailCreate) Save(ctx context.Context) (*Detail, error) {
	var (
		err  error
		node *Detail
	)
	if err := dc.defaults(); err != nil {
		return nil, err
	}
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DetailCreate) SaveX(ctx context.Context) *Detail {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DetailCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DetailCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DetailCreate) defaults() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		if detail.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := detail.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		if detail.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := detail.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		if detail.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := detail.DefaultDeletedAt()
		dc.mutation.SetDeletedAt(v)
	}
	if _, ok := dc.mutation.AppID(); !ok {
		if detail.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := detail.DefaultAppID()
		dc.mutation.SetAppID(v)
	}
	if _, ok := dc.mutation.UserID(); !ok {
		if detail.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := detail.DefaultUserID()
		dc.mutation.SetUserID(v)
	}
	if _, ok := dc.mutation.GoodID(); !ok {
		if detail.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := detail.DefaultGoodID()
		dc.mutation.SetGoodID(v)
	}
	if _, ok := dc.mutation.OrderID(); !ok {
		if detail.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := detail.DefaultOrderID()
		dc.mutation.SetOrderID(v)
	}
	if _, ok := dc.mutation.PaymentID(); !ok {
		if detail.DefaultPaymentID == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultPaymentID (forgotten import ent/runtime?)")
		}
		v := detail.DefaultPaymentID()
		dc.mutation.SetPaymentID(v)
	}
	if _, ok := dc.mutation.CoinTypeID(); !ok {
		if detail.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := detail.DefaultCoinTypeID()
		dc.mutation.SetCoinTypeID(v)
	}
	if _, ok := dc.mutation.PaymentCoinTypeID(); !ok {
		if detail.DefaultPaymentCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultPaymentCoinTypeID (forgotten import ent/runtime?)")
		}
		v := detail.DefaultPaymentCoinTypeID()
		dc.mutation.SetPaymentCoinTypeID(v)
	}
	if _, ok := dc.mutation.Units(); !ok {
		v := detail.DefaultUnits
		dc.mutation.SetUnits(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		if detail.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized detail.DefaultID (forgotten import ent/runtime?)")
		}
		v := detail.DefaultID()
		dc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dc *DetailCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Detail.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Detail.updated_at"`)}
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Detail.deleted_at"`)}
	}
	return nil
}

func (dc *DetailCreate) sqlSave(ctx context.Context) (*Detail, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dc *DetailCreate) createSpec() (*Detail, *sqlgraph.CreateSpec) {
	var (
		_node = &Detail{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: detail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: detail.FieldID,
			},
		}
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: detail.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: detail.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: detail.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := dc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: detail.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := dc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: detail.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := dc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: detail.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := dc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: detail.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := dc.mutation.PaymentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: detail.FieldPaymentID,
		})
		_node.PaymentID = value
	}
	if value, ok := dc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: detail.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := dc.mutation.PaymentCoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: detail.FieldPaymentCoinTypeID,
		})
		_node.PaymentCoinTypeID = value
	}
	if value, ok := dc.mutation.PaymentCoinUsdCurrency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: detail.FieldPaymentCoinUsdCurrency,
		})
		_node.PaymentCoinUsdCurrency = value
	}
	if value, ok := dc.mutation.Units(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: detail.FieldUnits,
		})
		_node.Units = value
	}
	if value, ok := dc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: detail.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := dc.mutation.UsdAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: detail.FieldUsdAmount,
		})
		_node.UsdAmount = value
	}
	if value, ok := dc.mutation.Commission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: detail.FieldCommission,
		})
		_node.Commission = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Detail.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (dc *DetailCreate) OnConflict(opts ...sql.ConflictOption) *DetailUpsertOne {
	dc.conflict = opts
	return &DetailUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Detail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dc *DetailCreate) OnConflictColumns(columns ...string) *DetailUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DetailUpsertOne{
		create: dc,
	}
}

type (
	// DetailUpsertOne is the builder for "upsert"-ing
	//  one Detail node.
	DetailUpsertOne struct {
		create *DetailCreate
	}

	// DetailUpsert is the "OnConflict" setter.
	DetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *DetailUpsert) SetCreatedAt(v uint32) *DetailUpsert {
	u.Set(detail.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DetailUpsert) UpdateCreatedAt() *DetailUpsert {
	u.SetExcluded(detail.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DetailUpsert) AddCreatedAt(v uint32) *DetailUpsert {
	u.Add(detail.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DetailUpsert) SetUpdatedAt(v uint32) *DetailUpsert {
	u.Set(detail.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DetailUpsert) UpdateUpdatedAt() *DetailUpsert {
	u.SetExcluded(detail.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DetailUpsert) AddUpdatedAt(v uint32) *DetailUpsert {
	u.Add(detail.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DetailUpsert) SetDeletedAt(v uint32) *DetailUpsert {
	u.Set(detail.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DetailUpsert) UpdateDeletedAt() *DetailUpsert {
	u.SetExcluded(detail.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DetailUpsert) AddDeletedAt(v uint32) *DetailUpsert {
	u.Add(detail.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *DetailUpsert) SetAppID(v uuid.UUID) *DetailUpsert {
	u.Set(detail.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *DetailUpsert) UpdateAppID() *DetailUpsert {
	u.SetExcluded(detail.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *DetailUpsert) ClearAppID() *DetailUpsert {
	u.SetNull(detail.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *DetailUpsert) SetUserID(v uuid.UUID) *DetailUpsert {
	u.Set(detail.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *DetailUpsert) UpdateUserID() *DetailUpsert {
	u.SetExcluded(detail.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *DetailUpsert) ClearUserID() *DetailUpsert {
	u.SetNull(detail.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *DetailUpsert) SetGoodID(v uuid.UUID) *DetailUpsert {
	u.Set(detail.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *DetailUpsert) UpdateGoodID() *DetailUpsert {
	u.SetExcluded(detail.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *DetailUpsert) ClearGoodID() *DetailUpsert {
	u.SetNull(detail.FieldGoodID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *DetailUpsert) SetOrderID(v uuid.UUID) *DetailUpsert {
	u.Set(detail.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *DetailUpsert) UpdateOrderID() *DetailUpsert {
	u.SetExcluded(detail.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *DetailUpsert) ClearOrderID() *DetailUpsert {
	u.SetNull(detail.FieldOrderID)
	return u
}

// SetPaymentID sets the "payment_id" field.
func (u *DetailUpsert) SetPaymentID(v uuid.UUID) *DetailUpsert {
	u.Set(detail.FieldPaymentID, v)
	return u
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *DetailUpsert) UpdatePaymentID() *DetailUpsert {
	u.SetExcluded(detail.FieldPaymentID)
	return u
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *DetailUpsert) ClearPaymentID() *DetailUpsert {
	u.SetNull(detail.FieldPaymentID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *DetailUpsert) SetCoinTypeID(v uuid.UUID) *DetailUpsert {
	u.Set(detail.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *DetailUpsert) UpdateCoinTypeID() *DetailUpsert {
	u.SetExcluded(detail.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *DetailUpsert) ClearCoinTypeID() *DetailUpsert {
	u.SetNull(detail.FieldCoinTypeID)
	return u
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (u *DetailUpsert) SetPaymentCoinTypeID(v uuid.UUID) *DetailUpsert {
	u.Set(detail.FieldPaymentCoinTypeID, v)
	return u
}

// UpdatePaymentCoinTypeID sets the "payment_coin_type_id" field to the value that was provided on create.
func (u *DetailUpsert) UpdatePaymentCoinTypeID() *DetailUpsert {
	u.SetExcluded(detail.FieldPaymentCoinTypeID)
	return u
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (u *DetailUpsert) ClearPaymentCoinTypeID() *DetailUpsert {
	u.SetNull(detail.FieldPaymentCoinTypeID)
	return u
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (u *DetailUpsert) SetPaymentCoinUsdCurrency(v decimal.Decimal) *DetailUpsert {
	u.Set(detail.FieldPaymentCoinUsdCurrency, v)
	return u
}

// UpdatePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field to the value that was provided on create.
func (u *DetailUpsert) UpdatePaymentCoinUsdCurrency() *DetailUpsert {
	u.SetExcluded(detail.FieldPaymentCoinUsdCurrency)
	return u
}

// AddPaymentCoinUsdCurrency adds v to the "payment_coin_usd_currency" field.
func (u *DetailUpsert) AddPaymentCoinUsdCurrency(v decimal.Decimal) *DetailUpsert {
	u.Add(detail.FieldPaymentCoinUsdCurrency, v)
	return u
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (u *DetailUpsert) ClearPaymentCoinUsdCurrency() *DetailUpsert {
	u.SetNull(detail.FieldPaymentCoinUsdCurrency)
	return u
}

// SetUnits sets the "units" field.
func (u *DetailUpsert) SetUnits(v uint32) *DetailUpsert {
	u.Set(detail.FieldUnits, v)
	return u
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *DetailUpsert) UpdateUnits() *DetailUpsert {
	u.SetExcluded(detail.FieldUnits)
	return u
}

// AddUnits adds v to the "units" field.
func (u *DetailUpsert) AddUnits(v uint32) *DetailUpsert {
	u.Add(detail.FieldUnits, v)
	return u
}

// ClearUnits clears the value of the "units" field.
func (u *DetailUpsert) ClearUnits() *DetailUpsert {
	u.SetNull(detail.FieldUnits)
	return u
}

// SetAmount sets the "amount" field.
func (u *DetailUpsert) SetAmount(v decimal.Decimal) *DetailUpsert {
	u.Set(detail.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *DetailUpsert) UpdateAmount() *DetailUpsert {
	u.SetExcluded(detail.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *DetailUpsert) AddAmount(v decimal.Decimal) *DetailUpsert {
	u.Add(detail.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *DetailUpsert) ClearAmount() *DetailUpsert {
	u.SetNull(detail.FieldAmount)
	return u
}

// SetUsdAmount sets the "usd_amount" field.
func (u *DetailUpsert) SetUsdAmount(v decimal.Decimal) *DetailUpsert {
	u.Set(detail.FieldUsdAmount, v)
	return u
}

// UpdateUsdAmount sets the "usd_amount" field to the value that was provided on create.
func (u *DetailUpsert) UpdateUsdAmount() *DetailUpsert {
	u.SetExcluded(detail.FieldUsdAmount)
	return u
}

// AddUsdAmount adds v to the "usd_amount" field.
func (u *DetailUpsert) AddUsdAmount(v decimal.Decimal) *DetailUpsert {
	u.Add(detail.FieldUsdAmount, v)
	return u
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (u *DetailUpsert) ClearUsdAmount() *DetailUpsert {
	u.SetNull(detail.FieldUsdAmount)
	return u
}

// SetCommission sets the "commission" field.
func (u *DetailUpsert) SetCommission(v decimal.Decimal) *DetailUpsert {
	u.Set(detail.FieldCommission, v)
	return u
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *DetailUpsert) UpdateCommission() *DetailUpsert {
	u.SetExcluded(detail.FieldCommission)
	return u
}

// AddCommission adds v to the "commission" field.
func (u *DetailUpsert) AddCommission(v decimal.Decimal) *DetailUpsert {
	u.Add(detail.FieldCommission, v)
	return u
}

// ClearCommission clears the value of the "commission" field.
func (u *DetailUpsert) ClearCommission() *DetailUpsert {
	u.SetNull(detail.FieldCommission)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Detail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(detail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DetailUpsertOne) UpdateNewValues() *DetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(detail.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Detail.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DetailUpsertOne) Ignore() *DetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DetailUpsertOne) DoNothing() *DetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DetailCreate.OnConflict
// documentation for more info.
func (u *DetailUpsertOne) Update(set func(*DetailUpsert)) *DetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DetailUpsertOne) SetCreatedAt(v uint32) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DetailUpsertOne) AddCreatedAt(v uint32) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateCreatedAt() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DetailUpsertOne) SetUpdatedAt(v uint32) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DetailUpsertOne) AddUpdatedAt(v uint32) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateUpdatedAt() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DetailUpsertOne) SetDeletedAt(v uint32) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DetailUpsertOne) AddDeletedAt(v uint32) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateDeletedAt() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *DetailUpsertOne) SetAppID(v uuid.UUID) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateAppID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *DetailUpsertOne) ClearAppID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *DetailUpsertOne) SetUserID(v uuid.UUID) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateUserID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *DetailUpsertOne) ClearUserID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *DetailUpsertOne) SetGoodID(v uuid.UUID) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateGoodID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *DetailUpsertOne) ClearGoodID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *DetailUpsertOne) SetOrderID(v uuid.UUID) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateOrderID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *DetailUpsertOne) ClearOrderID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearOrderID()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *DetailUpsertOne) SetPaymentID(v uuid.UUID) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdatePaymentID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *DetailUpsertOne) ClearPaymentID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearPaymentID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *DetailUpsertOne) SetCoinTypeID(v uuid.UUID) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateCoinTypeID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *DetailUpsertOne) ClearCoinTypeID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (u *DetailUpsertOne) SetPaymentCoinTypeID(v uuid.UUID) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetPaymentCoinTypeID(v)
	})
}

// UpdatePaymentCoinTypeID sets the "payment_coin_type_id" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdatePaymentCoinTypeID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdatePaymentCoinTypeID()
	})
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (u *DetailUpsertOne) ClearPaymentCoinTypeID() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearPaymentCoinTypeID()
	})
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (u *DetailUpsertOne) SetPaymentCoinUsdCurrency(v decimal.Decimal) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetPaymentCoinUsdCurrency(v)
	})
}

// AddPaymentCoinUsdCurrency adds v to the "payment_coin_usd_currency" field.
func (u *DetailUpsertOne) AddPaymentCoinUsdCurrency(v decimal.Decimal) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.AddPaymentCoinUsdCurrency(v)
	})
}

// UpdatePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdatePaymentCoinUsdCurrency() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdatePaymentCoinUsdCurrency()
	})
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (u *DetailUpsertOne) ClearPaymentCoinUsdCurrency() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearPaymentCoinUsdCurrency()
	})
}

// SetUnits sets the "units" field.
func (u *DetailUpsertOne) SetUnits(v uint32) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *DetailUpsertOne) AddUnits(v uint32) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateUnits() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *DetailUpsertOne) ClearUnits() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearUnits()
	})
}

// SetAmount sets the "amount" field.
func (u *DetailUpsertOne) SetAmount(v decimal.Decimal) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *DetailUpsertOne) AddAmount(v decimal.Decimal) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateAmount() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *DetailUpsertOne) ClearAmount() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearAmount()
	})
}

// SetUsdAmount sets the "usd_amount" field.
func (u *DetailUpsertOne) SetUsdAmount(v decimal.Decimal) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetUsdAmount(v)
	})
}

// AddUsdAmount adds v to the "usd_amount" field.
func (u *DetailUpsertOne) AddUsdAmount(v decimal.Decimal) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.AddUsdAmount(v)
	})
}

// UpdateUsdAmount sets the "usd_amount" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateUsdAmount() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateUsdAmount()
	})
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (u *DetailUpsertOne) ClearUsdAmount() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearUsdAmount()
	})
}

// SetCommission sets the "commission" field.
func (u *DetailUpsertOne) SetCommission(v decimal.Decimal) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.SetCommission(v)
	})
}

// AddCommission adds v to the "commission" field.
func (u *DetailUpsertOne) AddCommission(v decimal.Decimal) *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.AddCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *DetailUpsertOne) UpdateCommission() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateCommission()
	})
}

// ClearCommission clears the value of the "commission" field.
func (u *DetailUpsertOne) ClearCommission() *DetailUpsertOne {
	return u.Update(func(s *DetailUpsert) {
		s.ClearCommission()
	})
}

// Exec executes the query.
func (u *DetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DetailUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DetailUpsertOne.ID is not supported by MySQL driver. Use DetailUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DetailUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DetailCreateBulk is the builder for creating many Detail entities in bulk.
type DetailCreateBulk struct {
	config
	builders []*DetailCreate
	conflict []sql.ConflictOption
}

// Save creates the Detail entities in the database.
func (dcb *DetailCreateBulk) Save(ctx context.Context) ([]*Detail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Detail, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DetailCreateBulk) SaveX(ctx context.Context) []*Detail {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DetailCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DetailCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Detail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (dcb *DetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *DetailUpsertBulk {
	dcb.conflict = opts
	return &DetailUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Detail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dcb *DetailCreateBulk) OnConflictColumns(columns ...string) *DetailUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DetailUpsertBulk{
		create: dcb,
	}
}

// DetailUpsertBulk is the builder for "upsert"-ing
// a bulk of Detail nodes.
type DetailUpsertBulk struct {
	create *DetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Detail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(detail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DetailUpsertBulk) UpdateNewValues() *DetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(detail.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Detail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DetailUpsertBulk) Ignore() *DetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DetailUpsertBulk) DoNothing() *DetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DetailCreateBulk.OnConflict
// documentation for more info.
func (u *DetailUpsertBulk) Update(set func(*DetailUpsert)) *DetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DetailUpsertBulk) SetCreatedAt(v uint32) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DetailUpsertBulk) AddCreatedAt(v uint32) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateCreatedAt() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DetailUpsertBulk) SetUpdatedAt(v uint32) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DetailUpsertBulk) AddUpdatedAt(v uint32) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateUpdatedAt() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DetailUpsertBulk) SetDeletedAt(v uint32) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DetailUpsertBulk) AddDeletedAt(v uint32) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateDeletedAt() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *DetailUpsertBulk) SetAppID(v uuid.UUID) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateAppID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *DetailUpsertBulk) ClearAppID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *DetailUpsertBulk) SetUserID(v uuid.UUID) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateUserID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *DetailUpsertBulk) ClearUserID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *DetailUpsertBulk) SetGoodID(v uuid.UUID) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateGoodID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *DetailUpsertBulk) ClearGoodID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *DetailUpsertBulk) SetOrderID(v uuid.UUID) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateOrderID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *DetailUpsertBulk) ClearOrderID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearOrderID()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *DetailUpsertBulk) SetPaymentID(v uuid.UUID) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdatePaymentID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *DetailUpsertBulk) ClearPaymentID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearPaymentID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *DetailUpsertBulk) SetCoinTypeID(v uuid.UUID) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateCoinTypeID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *DetailUpsertBulk) ClearCoinTypeID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (u *DetailUpsertBulk) SetPaymentCoinTypeID(v uuid.UUID) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetPaymentCoinTypeID(v)
	})
}

// UpdatePaymentCoinTypeID sets the "payment_coin_type_id" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdatePaymentCoinTypeID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdatePaymentCoinTypeID()
	})
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (u *DetailUpsertBulk) ClearPaymentCoinTypeID() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearPaymentCoinTypeID()
	})
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (u *DetailUpsertBulk) SetPaymentCoinUsdCurrency(v decimal.Decimal) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetPaymentCoinUsdCurrency(v)
	})
}

// AddPaymentCoinUsdCurrency adds v to the "payment_coin_usd_currency" field.
func (u *DetailUpsertBulk) AddPaymentCoinUsdCurrency(v decimal.Decimal) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.AddPaymentCoinUsdCurrency(v)
	})
}

// UpdatePaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdatePaymentCoinUsdCurrency() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdatePaymentCoinUsdCurrency()
	})
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (u *DetailUpsertBulk) ClearPaymentCoinUsdCurrency() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearPaymentCoinUsdCurrency()
	})
}

// SetUnits sets the "units" field.
func (u *DetailUpsertBulk) SetUnits(v uint32) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *DetailUpsertBulk) AddUnits(v uint32) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateUnits() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateUnits()
	})
}

// ClearUnits clears the value of the "units" field.
func (u *DetailUpsertBulk) ClearUnits() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearUnits()
	})
}

// SetAmount sets the "amount" field.
func (u *DetailUpsertBulk) SetAmount(v decimal.Decimal) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *DetailUpsertBulk) AddAmount(v decimal.Decimal) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateAmount() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *DetailUpsertBulk) ClearAmount() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearAmount()
	})
}

// SetUsdAmount sets the "usd_amount" field.
func (u *DetailUpsertBulk) SetUsdAmount(v decimal.Decimal) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetUsdAmount(v)
	})
}

// AddUsdAmount adds v to the "usd_amount" field.
func (u *DetailUpsertBulk) AddUsdAmount(v decimal.Decimal) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.AddUsdAmount(v)
	})
}

// UpdateUsdAmount sets the "usd_amount" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateUsdAmount() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateUsdAmount()
	})
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (u *DetailUpsertBulk) ClearUsdAmount() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearUsdAmount()
	})
}

// SetCommission sets the "commission" field.
func (u *DetailUpsertBulk) SetCommission(v decimal.Decimal) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.SetCommission(v)
	})
}

// AddCommission adds v to the "commission" field.
func (u *DetailUpsertBulk) AddCommission(v decimal.Decimal) *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.AddCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *DetailUpsertBulk) UpdateCommission() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.UpdateCommission()
	})
}

// ClearCommission clears the value of the "commission" field.
func (u *DetailUpsertBulk) ClearCommission() *DetailUpsertBulk {
	return u.Update(func(s *DetailUpsert) {
		s.ClearCommission()
	})
}

// Exec executes the query.
func (u *DetailUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
