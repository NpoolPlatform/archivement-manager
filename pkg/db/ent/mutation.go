// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/archivement-manager/pkg/db/ent/detail"
	"github.com/NpoolPlatform/archivement-manager/pkg/db/ent/general"
	"github.com/NpoolPlatform/archivement-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDetail  = "Detail"
	TypeGeneral = "General"
)

// DetailMutation represents an operation that mutates the Detail nodes in the graph.
type DetailMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	created_at                *uint32
	addcreated_at             *int32
	updated_at                *uint32
	addupdated_at             *int32
	deleted_at                *uint32
	adddeleted_at             *int32
	app_id                    *uuid.UUID
	user_id                   *uuid.UUID
	direct_contributor_id     *uuid.UUID
	good_id                   *uuid.UUID
	order_id                  *uuid.UUID
	self_order                *bool
	payment_id                *uuid.UUID
	coin_type_id              *uuid.UUID
	payment_coin_type_id      *uuid.UUID
	payment_coin_usd_currency *decimal.Decimal
	units                     *uint32
	addunits                  *int32
	amount                    *decimal.Decimal
	usd_amount                *decimal.Decimal
	commission                *decimal.Decimal
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*Detail, error)
	predicates                []predicate.Detail
}

var _ ent.Mutation = (*DetailMutation)(nil)

// detailOption allows management of the mutation configuration using functional options.
type detailOption func(*DetailMutation)

// newDetailMutation creates new mutation for the Detail entity.
func newDetailMutation(c config, op Op, opts ...detailOption) *DetailMutation {
	m := &DetailMutation{
		config:        c,
		op:            op,
		typ:           TypeDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDetailID sets the ID field of the mutation.
func withDetailID(id uuid.UUID) detailOption {
	return func(m *DetailMutation) {
		var (
			err   error
			once  sync.Once
			value *Detail
		)
		m.oldValue = func(ctx context.Context) (*Detail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Detail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDetail sets the old Detail of the mutation.
func withDetail(node *Detail) detailOption {
	return func(m *DetailMutation) {
		m.oldValue = func(context.Context) (*Detail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Detail entities.
func (m *DetailMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DetailMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DetailMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Detail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DetailMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DetailMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *DetailMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *DetailMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DetailMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DetailMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DetailMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *DetailMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *DetailMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DetailMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *DetailMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *DetailMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *DetailMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *DetailMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *DetailMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *DetailMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *DetailMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *DetailMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[detail.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *DetailMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *DetailMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, detail.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *DetailMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DetailMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *DetailMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[detail.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *DetailMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DetailMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, detail.FieldUserID)
}

// SetDirectContributorID sets the "direct_contributor_id" field.
func (m *DetailMutation) SetDirectContributorID(u uuid.UUID) {
	m.direct_contributor_id = &u
}

// DirectContributorID returns the value of the "direct_contributor_id" field in the mutation.
func (m *DetailMutation) DirectContributorID() (r uuid.UUID, exists bool) {
	v := m.direct_contributor_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDirectContributorID returns the old "direct_contributor_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldDirectContributorID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDirectContributorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDirectContributorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDirectContributorID: %w", err)
	}
	return oldValue.DirectContributorID, nil
}

// ClearDirectContributorID clears the value of the "direct_contributor_id" field.
func (m *DetailMutation) ClearDirectContributorID() {
	m.direct_contributor_id = nil
	m.clearedFields[detail.FieldDirectContributorID] = struct{}{}
}

// DirectContributorIDCleared returns if the "direct_contributor_id" field was cleared in this mutation.
func (m *DetailMutation) DirectContributorIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldDirectContributorID]
	return ok
}

// ResetDirectContributorID resets all changes to the "direct_contributor_id" field.
func (m *DetailMutation) ResetDirectContributorID() {
	m.direct_contributor_id = nil
	delete(m.clearedFields, detail.FieldDirectContributorID)
}

// SetGoodID sets the "good_id" field.
func (m *DetailMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *DetailMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ClearGoodID clears the value of the "good_id" field.
func (m *DetailMutation) ClearGoodID() {
	m.good_id = nil
	m.clearedFields[detail.FieldGoodID] = struct{}{}
}

// GoodIDCleared returns if the "good_id" field was cleared in this mutation.
func (m *DetailMutation) GoodIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldGoodID]
	return ok
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *DetailMutation) ResetGoodID() {
	m.good_id = nil
	delete(m.clearedFields, detail.FieldGoodID)
}

// SetOrderID sets the "order_id" field.
func (m *DetailMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *DetailMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *DetailMutation) ClearOrderID() {
	m.order_id = nil
	m.clearedFields[detail.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *DetailMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *DetailMutation) ResetOrderID() {
	m.order_id = nil
	delete(m.clearedFields, detail.FieldOrderID)
}

// SetSelfOrder sets the "self_order" field.
func (m *DetailMutation) SetSelfOrder(b bool) {
	m.self_order = &b
}

// SelfOrder returns the value of the "self_order" field in the mutation.
func (m *DetailMutation) SelfOrder() (r bool, exists bool) {
	v := m.self_order
	if v == nil {
		return
	}
	return *v, true
}

// OldSelfOrder returns the old "self_order" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldSelfOrder(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelfOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelfOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelfOrder: %w", err)
	}
	return oldValue.SelfOrder, nil
}

// ClearSelfOrder clears the value of the "self_order" field.
func (m *DetailMutation) ClearSelfOrder() {
	m.self_order = nil
	m.clearedFields[detail.FieldSelfOrder] = struct{}{}
}

// SelfOrderCleared returns if the "self_order" field was cleared in this mutation.
func (m *DetailMutation) SelfOrderCleared() bool {
	_, ok := m.clearedFields[detail.FieldSelfOrder]
	return ok
}

// ResetSelfOrder resets all changes to the "self_order" field.
func (m *DetailMutation) ResetSelfOrder() {
	m.self_order = nil
	delete(m.clearedFields, detail.FieldSelfOrder)
}

// SetPaymentID sets the "payment_id" field.
func (m *DetailMutation) SetPaymentID(u uuid.UUID) {
	m.payment_id = &u
}

// PaymentID returns the value of the "payment_id" field in the mutation.
func (m *DetailMutation) PaymentID() (r uuid.UUID, exists bool) {
	v := m.payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentID returns the old "payment_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldPaymentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentID: %w", err)
	}
	return oldValue.PaymentID, nil
}

// ClearPaymentID clears the value of the "payment_id" field.
func (m *DetailMutation) ClearPaymentID() {
	m.payment_id = nil
	m.clearedFields[detail.FieldPaymentID] = struct{}{}
}

// PaymentIDCleared returns if the "payment_id" field was cleared in this mutation.
func (m *DetailMutation) PaymentIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldPaymentID]
	return ok
}

// ResetPaymentID resets all changes to the "payment_id" field.
func (m *DetailMutation) ResetPaymentID() {
	m.payment_id = nil
	delete(m.clearedFields, detail.FieldPaymentID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *DetailMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *DetailMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *DetailMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[detail.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *DetailMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *DetailMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, detail.FieldCoinTypeID)
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (m *DetailMutation) SetPaymentCoinTypeID(u uuid.UUID) {
	m.payment_coin_type_id = &u
}

// PaymentCoinTypeID returns the value of the "payment_coin_type_id" field in the mutation.
func (m *DetailMutation) PaymentCoinTypeID() (r uuid.UUID, exists bool) {
	v := m.payment_coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentCoinTypeID returns the old "payment_coin_type_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldPaymentCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentCoinTypeID: %w", err)
	}
	return oldValue.PaymentCoinTypeID, nil
}

// ClearPaymentCoinTypeID clears the value of the "payment_coin_type_id" field.
func (m *DetailMutation) ClearPaymentCoinTypeID() {
	m.payment_coin_type_id = nil
	m.clearedFields[detail.FieldPaymentCoinTypeID] = struct{}{}
}

// PaymentCoinTypeIDCleared returns if the "payment_coin_type_id" field was cleared in this mutation.
func (m *DetailMutation) PaymentCoinTypeIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldPaymentCoinTypeID]
	return ok
}

// ResetPaymentCoinTypeID resets all changes to the "payment_coin_type_id" field.
func (m *DetailMutation) ResetPaymentCoinTypeID() {
	m.payment_coin_type_id = nil
	delete(m.clearedFields, detail.FieldPaymentCoinTypeID)
}

// SetPaymentCoinUsdCurrency sets the "payment_coin_usd_currency" field.
func (m *DetailMutation) SetPaymentCoinUsdCurrency(d decimal.Decimal) {
	m.payment_coin_usd_currency = &d
}

// PaymentCoinUsdCurrency returns the value of the "payment_coin_usd_currency" field in the mutation.
func (m *DetailMutation) PaymentCoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.payment_coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentCoinUsdCurrency returns the old "payment_coin_usd_currency" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldPaymentCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentCoinUsdCurrency: %w", err)
	}
	return oldValue.PaymentCoinUsdCurrency, nil
}

// ClearPaymentCoinUsdCurrency clears the value of the "payment_coin_usd_currency" field.
func (m *DetailMutation) ClearPaymentCoinUsdCurrency() {
	m.payment_coin_usd_currency = nil
	m.clearedFields[detail.FieldPaymentCoinUsdCurrency] = struct{}{}
}

// PaymentCoinUsdCurrencyCleared returns if the "payment_coin_usd_currency" field was cleared in this mutation.
func (m *DetailMutation) PaymentCoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[detail.FieldPaymentCoinUsdCurrency]
	return ok
}

// ResetPaymentCoinUsdCurrency resets all changes to the "payment_coin_usd_currency" field.
func (m *DetailMutation) ResetPaymentCoinUsdCurrency() {
	m.payment_coin_usd_currency = nil
	delete(m.clearedFields, detail.FieldPaymentCoinUsdCurrency)
}

// SetUnits sets the "units" field.
func (m *DetailMutation) SetUnits(u uint32) {
	m.units = &u
	m.addunits = nil
}

// Units returns the value of the "units" field in the mutation.
func (m *DetailMutation) Units() (r uint32, exists bool) {
	v := m.units
	if v == nil {
		return
	}
	return *v, true
}

// OldUnits returns the old "units" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldUnits(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnits: %w", err)
	}
	return oldValue.Units, nil
}

// AddUnits adds u to the "units" field.
func (m *DetailMutation) AddUnits(u int32) {
	if m.addunits != nil {
		*m.addunits += u
	} else {
		m.addunits = &u
	}
}

// AddedUnits returns the value that was added to the "units" field in this mutation.
func (m *DetailMutation) AddedUnits() (r int32, exists bool) {
	v := m.addunits
	if v == nil {
		return
	}
	return *v, true
}

// ClearUnits clears the value of the "units" field.
func (m *DetailMutation) ClearUnits() {
	m.units = nil
	m.addunits = nil
	m.clearedFields[detail.FieldUnits] = struct{}{}
}

// UnitsCleared returns if the "units" field was cleared in this mutation.
func (m *DetailMutation) UnitsCleared() bool {
	_, ok := m.clearedFields[detail.FieldUnits]
	return ok
}

// ResetUnits resets all changes to the "units" field.
func (m *DetailMutation) ResetUnits() {
	m.units = nil
	m.addunits = nil
	delete(m.clearedFields, detail.FieldUnits)
}

// SetAmount sets the "amount" field.
func (m *DetailMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *DetailMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *DetailMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[detail.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *DetailMutation) AmountCleared() bool {
	_, ok := m.clearedFields[detail.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *DetailMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, detail.FieldAmount)
}

// SetUsdAmount sets the "usd_amount" field.
func (m *DetailMutation) SetUsdAmount(d decimal.Decimal) {
	m.usd_amount = &d
}

// UsdAmount returns the value of the "usd_amount" field in the mutation.
func (m *DetailMutation) UsdAmount() (r decimal.Decimal, exists bool) {
	v := m.usd_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldUsdAmount returns the old "usd_amount" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldUsdAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsdAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsdAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsdAmount: %w", err)
	}
	return oldValue.UsdAmount, nil
}

// ClearUsdAmount clears the value of the "usd_amount" field.
func (m *DetailMutation) ClearUsdAmount() {
	m.usd_amount = nil
	m.clearedFields[detail.FieldUsdAmount] = struct{}{}
}

// UsdAmountCleared returns if the "usd_amount" field was cleared in this mutation.
func (m *DetailMutation) UsdAmountCleared() bool {
	_, ok := m.clearedFields[detail.FieldUsdAmount]
	return ok
}

// ResetUsdAmount resets all changes to the "usd_amount" field.
func (m *DetailMutation) ResetUsdAmount() {
	m.usd_amount = nil
	delete(m.clearedFields, detail.FieldUsdAmount)
}

// SetCommission sets the "commission" field.
func (m *DetailMutation) SetCommission(d decimal.Decimal) {
	m.commission = &d
}

// Commission returns the value of the "commission" field in the mutation.
func (m *DetailMutation) Commission() (r decimal.Decimal, exists bool) {
	v := m.commission
	if v == nil {
		return
	}
	return *v, true
}

// OldCommission returns the old "commission" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldCommission(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommission is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommission requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommission: %w", err)
	}
	return oldValue.Commission, nil
}

// ClearCommission clears the value of the "commission" field.
func (m *DetailMutation) ClearCommission() {
	m.commission = nil
	m.clearedFields[detail.FieldCommission] = struct{}{}
}

// CommissionCleared returns if the "commission" field was cleared in this mutation.
func (m *DetailMutation) CommissionCleared() bool {
	_, ok := m.clearedFields[detail.FieldCommission]
	return ok
}

// ResetCommission resets all changes to the "commission" field.
func (m *DetailMutation) ResetCommission() {
	m.commission = nil
	delete(m.clearedFields, detail.FieldCommission)
}

// Where appends a list predicates to the DetailMutation builder.
func (m *DetailMutation) Where(ps ...predicate.Detail) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DetailMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Detail).
func (m *DetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DetailMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.created_at != nil {
		fields = append(fields, detail.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, detail.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, detail.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, detail.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, detail.FieldUserID)
	}
	if m.direct_contributor_id != nil {
		fields = append(fields, detail.FieldDirectContributorID)
	}
	if m.good_id != nil {
		fields = append(fields, detail.FieldGoodID)
	}
	if m.order_id != nil {
		fields = append(fields, detail.FieldOrderID)
	}
	if m.self_order != nil {
		fields = append(fields, detail.FieldSelfOrder)
	}
	if m.payment_id != nil {
		fields = append(fields, detail.FieldPaymentID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, detail.FieldCoinTypeID)
	}
	if m.payment_coin_type_id != nil {
		fields = append(fields, detail.FieldPaymentCoinTypeID)
	}
	if m.payment_coin_usd_currency != nil {
		fields = append(fields, detail.FieldPaymentCoinUsdCurrency)
	}
	if m.units != nil {
		fields = append(fields, detail.FieldUnits)
	}
	if m.amount != nil {
		fields = append(fields, detail.FieldAmount)
	}
	if m.usd_amount != nil {
		fields = append(fields, detail.FieldUsdAmount)
	}
	if m.commission != nil {
		fields = append(fields, detail.FieldCommission)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case detail.FieldCreatedAt:
		return m.CreatedAt()
	case detail.FieldUpdatedAt:
		return m.UpdatedAt()
	case detail.FieldDeletedAt:
		return m.DeletedAt()
	case detail.FieldAppID:
		return m.AppID()
	case detail.FieldUserID:
		return m.UserID()
	case detail.FieldDirectContributorID:
		return m.DirectContributorID()
	case detail.FieldGoodID:
		return m.GoodID()
	case detail.FieldOrderID:
		return m.OrderID()
	case detail.FieldSelfOrder:
		return m.SelfOrder()
	case detail.FieldPaymentID:
		return m.PaymentID()
	case detail.FieldCoinTypeID:
		return m.CoinTypeID()
	case detail.FieldPaymentCoinTypeID:
		return m.PaymentCoinTypeID()
	case detail.FieldPaymentCoinUsdCurrency:
		return m.PaymentCoinUsdCurrency()
	case detail.FieldUnits:
		return m.Units()
	case detail.FieldAmount:
		return m.Amount()
	case detail.FieldUsdAmount:
		return m.UsdAmount()
	case detail.FieldCommission:
		return m.Commission()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case detail.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case detail.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case detail.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case detail.FieldAppID:
		return m.OldAppID(ctx)
	case detail.FieldUserID:
		return m.OldUserID(ctx)
	case detail.FieldDirectContributorID:
		return m.OldDirectContributorID(ctx)
	case detail.FieldGoodID:
		return m.OldGoodID(ctx)
	case detail.FieldOrderID:
		return m.OldOrderID(ctx)
	case detail.FieldSelfOrder:
		return m.OldSelfOrder(ctx)
	case detail.FieldPaymentID:
		return m.OldPaymentID(ctx)
	case detail.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case detail.FieldPaymentCoinTypeID:
		return m.OldPaymentCoinTypeID(ctx)
	case detail.FieldPaymentCoinUsdCurrency:
		return m.OldPaymentCoinUsdCurrency(ctx)
	case detail.FieldUnits:
		return m.OldUnits(ctx)
	case detail.FieldAmount:
		return m.OldAmount(ctx)
	case detail.FieldUsdAmount:
		return m.OldUsdAmount(ctx)
	case detail.FieldCommission:
		return m.OldCommission(ctx)
	}
	return nil, fmt.Errorf("unknown Detail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case detail.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case detail.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case detail.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case detail.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case detail.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case detail.FieldDirectContributorID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDirectContributorID(v)
		return nil
	case detail.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case detail.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case detail.FieldSelfOrder:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelfOrder(v)
		return nil
	case detail.FieldPaymentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentID(v)
		return nil
	case detail.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case detail.FieldPaymentCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentCoinTypeID(v)
		return nil
	case detail.FieldPaymentCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentCoinUsdCurrency(v)
		return nil
	case detail.FieldUnits:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnits(v)
		return nil
	case detail.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case detail.FieldUsdAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsdAmount(v)
		return nil
	case detail.FieldCommission:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommission(v)
		return nil
	}
	return fmt.Errorf("unknown Detail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DetailMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, detail.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, detail.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, detail.FieldDeletedAt)
	}
	if m.addunits != nil {
		fields = append(fields, detail.FieldUnits)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case detail.FieldCreatedAt:
		return m.AddedCreatedAt()
	case detail.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case detail.FieldDeletedAt:
		return m.AddedDeletedAt()
	case detail.FieldUnits:
		return m.AddedUnits()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case detail.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case detail.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case detail.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case detail.FieldUnits:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnits(v)
		return nil
	}
	return fmt.Errorf("unknown Detail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(detail.FieldAppID) {
		fields = append(fields, detail.FieldAppID)
	}
	if m.FieldCleared(detail.FieldUserID) {
		fields = append(fields, detail.FieldUserID)
	}
	if m.FieldCleared(detail.FieldDirectContributorID) {
		fields = append(fields, detail.FieldDirectContributorID)
	}
	if m.FieldCleared(detail.FieldGoodID) {
		fields = append(fields, detail.FieldGoodID)
	}
	if m.FieldCleared(detail.FieldOrderID) {
		fields = append(fields, detail.FieldOrderID)
	}
	if m.FieldCleared(detail.FieldSelfOrder) {
		fields = append(fields, detail.FieldSelfOrder)
	}
	if m.FieldCleared(detail.FieldPaymentID) {
		fields = append(fields, detail.FieldPaymentID)
	}
	if m.FieldCleared(detail.FieldCoinTypeID) {
		fields = append(fields, detail.FieldCoinTypeID)
	}
	if m.FieldCleared(detail.FieldPaymentCoinTypeID) {
		fields = append(fields, detail.FieldPaymentCoinTypeID)
	}
	if m.FieldCleared(detail.FieldPaymentCoinUsdCurrency) {
		fields = append(fields, detail.FieldPaymentCoinUsdCurrency)
	}
	if m.FieldCleared(detail.FieldUnits) {
		fields = append(fields, detail.FieldUnits)
	}
	if m.FieldCleared(detail.FieldAmount) {
		fields = append(fields, detail.FieldAmount)
	}
	if m.FieldCleared(detail.FieldUsdAmount) {
		fields = append(fields, detail.FieldUsdAmount)
	}
	if m.FieldCleared(detail.FieldCommission) {
		fields = append(fields, detail.FieldCommission)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DetailMutation) ClearField(name string) error {
	switch name {
	case detail.FieldAppID:
		m.ClearAppID()
		return nil
	case detail.FieldUserID:
		m.ClearUserID()
		return nil
	case detail.FieldDirectContributorID:
		m.ClearDirectContributorID()
		return nil
	case detail.FieldGoodID:
		m.ClearGoodID()
		return nil
	case detail.FieldOrderID:
		m.ClearOrderID()
		return nil
	case detail.FieldSelfOrder:
		m.ClearSelfOrder()
		return nil
	case detail.FieldPaymentID:
		m.ClearPaymentID()
		return nil
	case detail.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case detail.FieldPaymentCoinTypeID:
		m.ClearPaymentCoinTypeID()
		return nil
	case detail.FieldPaymentCoinUsdCurrency:
		m.ClearPaymentCoinUsdCurrency()
		return nil
	case detail.FieldUnits:
		m.ClearUnits()
		return nil
	case detail.FieldAmount:
		m.ClearAmount()
		return nil
	case detail.FieldUsdAmount:
		m.ClearUsdAmount()
		return nil
	case detail.FieldCommission:
		m.ClearCommission()
		return nil
	}
	return fmt.Errorf("unknown Detail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DetailMutation) ResetField(name string) error {
	switch name {
	case detail.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case detail.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case detail.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case detail.FieldAppID:
		m.ResetAppID()
		return nil
	case detail.FieldUserID:
		m.ResetUserID()
		return nil
	case detail.FieldDirectContributorID:
		m.ResetDirectContributorID()
		return nil
	case detail.FieldGoodID:
		m.ResetGoodID()
		return nil
	case detail.FieldOrderID:
		m.ResetOrderID()
		return nil
	case detail.FieldSelfOrder:
		m.ResetSelfOrder()
		return nil
	case detail.FieldPaymentID:
		m.ResetPaymentID()
		return nil
	case detail.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case detail.FieldPaymentCoinTypeID:
		m.ResetPaymentCoinTypeID()
		return nil
	case detail.FieldPaymentCoinUsdCurrency:
		m.ResetPaymentCoinUsdCurrency()
		return nil
	case detail.FieldUnits:
		m.ResetUnits()
		return nil
	case detail.FieldAmount:
		m.ResetAmount()
		return nil
	case detail.FieldUsdAmount:
		m.ResetUsdAmount()
		return nil
	case detail.FieldCommission:
		m.ResetCommission()
		return nil
	}
	return fmt.Errorf("unknown Detail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Detail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Detail edge %s", name)
}

// GeneralMutation represents an operation that mutates the General nodes in the graph.
type GeneralMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	created_at       *uint32
	addcreated_at    *int32
	updated_at       *uint32
	addupdated_at    *int32
	deleted_at       *uint32
	adddeleted_at    *int32
	app_id           *uuid.UUID
	user_id          *uuid.UUID
	good_id          *uuid.UUID
	coin_type_id     *uuid.UUID
	total_units      *uint32
	addtotal_units   *int32
	self_units       *uint32
	addself_units    *int32
	total_amount     *decimal.Decimal
	self_amount      *decimal.Decimal
	total_commission *decimal.Decimal
	self_commission  *decimal.Decimal
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*General, error)
	predicates       []predicate.General
}

var _ ent.Mutation = (*GeneralMutation)(nil)

// generalOption allows management of the mutation configuration using functional options.
type generalOption func(*GeneralMutation)

// newGeneralMutation creates new mutation for the General entity.
func newGeneralMutation(c config, op Op, opts ...generalOption) *GeneralMutation {
	m := &GeneralMutation{
		config:        c,
		op:            op,
		typ:           TypeGeneral,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGeneralID sets the ID field of the mutation.
func withGeneralID(id uuid.UUID) generalOption {
	return func(m *GeneralMutation) {
		var (
			err   error
			once  sync.Once
			value *General
		)
		m.oldValue = func(ctx context.Context) (*General, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().General.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGeneral sets the old General of the mutation.
func withGeneral(node *General) generalOption {
	return func(m *GeneralMutation) {
		m.oldValue = func(context.Context) (*General, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GeneralMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GeneralMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of General entities.
func (m *GeneralMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GeneralMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GeneralMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().General.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GeneralMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GeneralMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *GeneralMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *GeneralMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GeneralMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GeneralMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GeneralMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *GeneralMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *GeneralMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GeneralMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GeneralMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GeneralMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *GeneralMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *GeneralMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GeneralMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *GeneralMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *GeneralMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *GeneralMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[general.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *GeneralMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[general.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *GeneralMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, general.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *GeneralMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GeneralMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *GeneralMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[general.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *GeneralMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[general.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GeneralMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, general.FieldUserID)
}

// SetGoodID sets the "good_id" field.
func (m *GeneralMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *GeneralMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ClearGoodID clears the value of the "good_id" field.
func (m *GeneralMutation) ClearGoodID() {
	m.good_id = nil
	m.clearedFields[general.FieldGoodID] = struct{}{}
}

// GoodIDCleared returns if the "good_id" field was cleared in this mutation.
func (m *GeneralMutation) GoodIDCleared() bool {
	_, ok := m.clearedFields[general.FieldGoodID]
	return ok
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *GeneralMutation) ResetGoodID() {
	m.good_id = nil
	delete(m.clearedFields, general.FieldGoodID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *GeneralMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *GeneralMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *GeneralMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[general.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *GeneralMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[general.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *GeneralMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, general.FieldCoinTypeID)
}

// SetTotalUnits sets the "total_units" field.
func (m *GeneralMutation) SetTotalUnits(u uint32) {
	m.total_units = &u
	m.addtotal_units = nil
}

// TotalUnits returns the value of the "total_units" field in the mutation.
func (m *GeneralMutation) TotalUnits() (r uint32, exists bool) {
	v := m.total_units
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalUnits returns the old "total_units" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldTotalUnits(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalUnits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalUnits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalUnits: %w", err)
	}
	return oldValue.TotalUnits, nil
}

// AddTotalUnits adds u to the "total_units" field.
func (m *GeneralMutation) AddTotalUnits(u int32) {
	if m.addtotal_units != nil {
		*m.addtotal_units += u
	} else {
		m.addtotal_units = &u
	}
}

// AddedTotalUnits returns the value that was added to the "total_units" field in this mutation.
func (m *GeneralMutation) AddedTotalUnits() (r int32, exists bool) {
	v := m.addtotal_units
	if v == nil {
		return
	}
	return *v, true
}

// ClearTotalUnits clears the value of the "total_units" field.
func (m *GeneralMutation) ClearTotalUnits() {
	m.total_units = nil
	m.addtotal_units = nil
	m.clearedFields[general.FieldTotalUnits] = struct{}{}
}

// TotalUnitsCleared returns if the "total_units" field was cleared in this mutation.
func (m *GeneralMutation) TotalUnitsCleared() bool {
	_, ok := m.clearedFields[general.FieldTotalUnits]
	return ok
}

// ResetTotalUnits resets all changes to the "total_units" field.
func (m *GeneralMutation) ResetTotalUnits() {
	m.total_units = nil
	m.addtotal_units = nil
	delete(m.clearedFields, general.FieldTotalUnits)
}

// SetSelfUnits sets the "self_units" field.
func (m *GeneralMutation) SetSelfUnits(u uint32) {
	m.self_units = &u
	m.addself_units = nil
}

// SelfUnits returns the value of the "self_units" field in the mutation.
func (m *GeneralMutation) SelfUnits() (r uint32, exists bool) {
	v := m.self_units
	if v == nil {
		return
	}
	return *v, true
}

// OldSelfUnits returns the old "self_units" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldSelfUnits(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelfUnits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelfUnits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelfUnits: %w", err)
	}
	return oldValue.SelfUnits, nil
}

// AddSelfUnits adds u to the "self_units" field.
func (m *GeneralMutation) AddSelfUnits(u int32) {
	if m.addself_units != nil {
		*m.addself_units += u
	} else {
		m.addself_units = &u
	}
}

// AddedSelfUnits returns the value that was added to the "self_units" field in this mutation.
func (m *GeneralMutation) AddedSelfUnits() (r int32, exists bool) {
	v := m.addself_units
	if v == nil {
		return
	}
	return *v, true
}

// ClearSelfUnits clears the value of the "self_units" field.
func (m *GeneralMutation) ClearSelfUnits() {
	m.self_units = nil
	m.addself_units = nil
	m.clearedFields[general.FieldSelfUnits] = struct{}{}
}

// SelfUnitsCleared returns if the "self_units" field was cleared in this mutation.
func (m *GeneralMutation) SelfUnitsCleared() bool {
	_, ok := m.clearedFields[general.FieldSelfUnits]
	return ok
}

// ResetSelfUnits resets all changes to the "self_units" field.
func (m *GeneralMutation) ResetSelfUnits() {
	m.self_units = nil
	m.addself_units = nil
	delete(m.clearedFields, general.FieldSelfUnits)
}

// SetTotalAmount sets the "total_amount" field.
func (m *GeneralMutation) SetTotalAmount(d decimal.Decimal) {
	m.total_amount = &d
}

// TotalAmount returns the value of the "total_amount" field in the mutation.
func (m *GeneralMutation) TotalAmount() (r decimal.Decimal, exists bool) {
	v := m.total_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalAmount returns the old "total_amount" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldTotalAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalAmount: %w", err)
	}
	return oldValue.TotalAmount, nil
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (m *GeneralMutation) ClearTotalAmount() {
	m.total_amount = nil
	m.clearedFields[general.FieldTotalAmount] = struct{}{}
}

// TotalAmountCleared returns if the "total_amount" field was cleared in this mutation.
func (m *GeneralMutation) TotalAmountCleared() bool {
	_, ok := m.clearedFields[general.FieldTotalAmount]
	return ok
}

// ResetTotalAmount resets all changes to the "total_amount" field.
func (m *GeneralMutation) ResetTotalAmount() {
	m.total_amount = nil
	delete(m.clearedFields, general.FieldTotalAmount)
}

// SetSelfAmount sets the "self_amount" field.
func (m *GeneralMutation) SetSelfAmount(d decimal.Decimal) {
	m.self_amount = &d
}

// SelfAmount returns the value of the "self_amount" field in the mutation.
func (m *GeneralMutation) SelfAmount() (r decimal.Decimal, exists bool) {
	v := m.self_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldSelfAmount returns the old "self_amount" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldSelfAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelfAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelfAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelfAmount: %w", err)
	}
	return oldValue.SelfAmount, nil
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (m *GeneralMutation) ClearSelfAmount() {
	m.self_amount = nil
	m.clearedFields[general.FieldSelfAmount] = struct{}{}
}

// SelfAmountCleared returns if the "self_amount" field was cleared in this mutation.
func (m *GeneralMutation) SelfAmountCleared() bool {
	_, ok := m.clearedFields[general.FieldSelfAmount]
	return ok
}

// ResetSelfAmount resets all changes to the "self_amount" field.
func (m *GeneralMutation) ResetSelfAmount() {
	m.self_amount = nil
	delete(m.clearedFields, general.FieldSelfAmount)
}

// SetTotalCommission sets the "total_commission" field.
func (m *GeneralMutation) SetTotalCommission(d decimal.Decimal) {
	m.total_commission = &d
}

// TotalCommission returns the value of the "total_commission" field in the mutation.
func (m *GeneralMutation) TotalCommission() (r decimal.Decimal, exists bool) {
	v := m.total_commission
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalCommission returns the old "total_commission" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldTotalCommission(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalCommission is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalCommission requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalCommission: %w", err)
	}
	return oldValue.TotalCommission, nil
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (m *GeneralMutation) ClearTotalCommission() {
	m.total_commission = nil
	m.clearedFields[general.FieldTotalCommission] = struct{}{}
}

// TotalCommissionCleared returns if the "total_commission" field was cleared in this mutation.
func (m *GeneralMutation) TotalCommissionCleared() bool {
	_, ok := m.clearedFields[general.FieldTotalCommission]
	return ok
}

// ResetTotalCommission resets all changes to the "total_commission" field.
func (m *GeneralMutation) ResetTotalCommission() {
	m.total_commission = nil
	delete(m.clearedFields, general.FieldTotalCommission)
}

// SetSelfCommission sets the "self_commission" field.
func (m *GeneralMutation) SetSelfCommission(d decimal.Decimal) {
	m.self_commission = &d
}

// SelfCommission returns the value of the "self_commission" field in the mutation.
func (m *GeneralMutation) SelfCommission() (r decimal.Decimal, exists bool) {
	v := m.self_commission
	if v == nil {
		return
	}
	return *v, true
}

// OldSelfCommission returns the old "self_commission" field's value of the General entity.
// If the General object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneralMutation) OldSelfCommission(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelfCommission is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelfCommission requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelfCommission: %w", err)
	}
	return oldValue.SelfCommission, nil
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (m *GeneralMutation) ClearSelfCommission() {
	m.self_commission = nil
	m.clearedFields[general.FieldSelfCommission] = struct{}{}
}

// SelfCommissionCleared returns if the "self_commission" field was cleared in this mutation.
func (m *GeneralMutation) SelfCommissionCleared() bool {
	_, ok := m.clearedFields[general.FieldSelfCommission]
	return ok
}

// ResetSelfCommission resets all changes to the "self_commission" field.
func (m *GeneralMutation) ResetSelfCommission() {
	m.self_commission = nil
	delete(m.clearedFields, general.FieldSelfCommission)
}

// Where appends a list predicates to the GeneralMutation builder.
func (m *GeneralMutation) Where(ps ...predicate.General) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GeneralMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (General).
func (m *GeneralMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GeneralMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, general.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, general.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, general.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, general.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, general.FieldUserID)
	}
	if m.good_id != nil {
		fields = append(fields, general.FieldGoodID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, general.FieldCoinTypeID)
	}
	if m.total_units != nil {
		fields = append(fields, general.FieldTotalUnits)
	}
	if m.self_units != nil {
		fields = append(fields, general.FieldSelfUnits)
	}
	if m.total_amount != nil {
		fields = append(fields, general.FieldTotalAmount)
	}
	if m.self_amount != nil {
		fields = append(fields, general.FieldSelfAmount)
	}
	if m.total_commission != nil {
		fields = append(fields, general.FieldTotalCommission)
	}
	if m.self_commission != nil {
		fields = append(fields, general.FieldSelfCommission)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GeneralMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case general.FieldCreatedAt:
		return m.CreatedAt()
	case general.FieldUpdatedAt:
		return m.UpdatedAt()
	case general.FieldDeletedAt:
		return m.DeletedAt()
	case general.FieldAppID:
		return m.AppID()
	case general.FieldUserID:
		return m.UserID()
	case general.FieldGoodID:
		return m.GoodID()
	case general.FieldCoinTypeID:
		return m.CoinTypeID()
	case general.FieldTotalUnits:
		return m.TotalUnits()
	case general.FieldSelfUnits:
		return m.SelfUnits()
	case general.FieldTotalAmount:
		return m.TotalAmount()
	case general.FieldSelfAmount:
		return m.SelfAmount()
	case general.FieldTotalCommission:
		return m.TotalCommission()
	case general.FieldSelfCommission:
		return m.SelfCommission()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GeneralMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case general.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case general.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case general.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case general.FieldAppID:
		return m.OldAppID(ctx)
	case general.FieldUserID:
		return m.OldUserID(ctx)
	case general.FieldGoodID:
		return m.OldGoodID(ctx)
	case general.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case general.FieldTotalUnits:
		return m.OldTotalUnits(ctx)
	case general.FieldSelfUnits:
		return m.OldSelfUnits(ctx)
	case general.FieldTotalAmount:
		return m.OldTotalAmount(ctx)
	case general.FieldSelfAmount:
		return m.OldSelfAmount(ctx)
	case general.FieldTotalCommission:
		return m.OldTotalCommission(ctx)
	case general.FieldSelfCommission:
		return m.OldSelfCommission(ctx)
	}
	return nil, fmt.Errorf("unknown General field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GeneralMutation) SetField(name string, value ent.Value) error {
	switch name {
	case general.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case general.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case general.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case general.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case general.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case general.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case general.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case general.FieldTotalUnits:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalUnits(v)
		return nil
	case general.FieldSelfUnits:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelfUnits(v)
		return nil
	case general.FieldTotalAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalAmount(v)
		return nil
	case general.FieldSelfAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelfAmount(v)
		return nil
	case general.FieldTotalCommission:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalCommission(v)
		return nil
	case general.FieldSelfCommission:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelfCommission(v)
		return nil
	}
	return fmt.Errorf("unknown General field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GeneralMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, general.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, general.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, general.FieldDeletedAt)
	}
	if m.addtotal_units != nil {
		fields = append(fields, general.FieldTotalUnits)
	}
	if m.addself_units != nil {
		fields = append(fields, general.FieldSelfUnits)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GeneralMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case general.FieldCreatedAt:
		return m.AddedCreatedAt()
	case general.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case general.FieldDeletedAt:
		return m.AddedDeletedAt()
	case general.FieldTotalUnits:
		return m.AddedTotalUnits()
	case general.FieldSelfUnits:
		return m.AddedSelfUnits()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GeneralMutation) AddField(name string, value ent.Value) error {
	switch name {
	case general.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case general.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case general.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case general.FieldTotalUnits:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalUnits(v)
		return nil
	case general.FieldSelfUnits:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSelfUnits(v)
		return nil
	}
	return fmt.Errorf("unknown General numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GeneralMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(general.FieldAppID) {
		fields = append(fields, general.FieldAppID)
	}
	if m.FieldCleared(general.FieldUserID) {
		fields = append(fields, general.FieldUserID)
	}
	if m.FieldCleared(general.FieldGoodID) {
		fields = append(fields, general.FieldGoodID)
	}
	if m.FieldCleared(general.FieldCoinTypeID) {
		fields = append(fields, general.FieldCoinTypeID)
	}
	if m.FieldCleared(general.FieldTotalUnits) {
		fields = append(fields, general.FieldTotalUnits)
	}
	if m.FieldCleared(general.FieldSelfUnits) {
		fields = append(fields, general.FieldSelfUnits)
	}
	if m.FieldCleared(general.FieldTotalAmount) {
		fields = append(fields, general.FieldTotalAmount)
	}
	if m.FieldCleared(general.FieldSelfAmount) {
		fields = append(fields, general.FieldSelfAmount)
	}
	if m.FieldCleared(general.FieldTotalCommission) {
		fields = append(fields, general.FieldTotalCommission)
	}
	if m.FieldCleared(general.FieldSelfCommission) {
		fields = append(fields, general.FieldSelfCommission)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GeneralMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GeneralMutation) ClearField(name string) error {
	switch name {
	case general.FieldAppID:
		m.ClearAppID()
		return nil
	case general.FieldUserID:
		m.ClearUserID()
		return nil
	case general.FieldGoodID:
		m.ClearGoodID()
		return nil
	case general.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case general.FieldTotalUnits:
		m.ClearTotalUnits()
		return nil
	case general.FieldSelfUnits:
		m.ClearSelfUnits()
		return nil
	case general.FieldTotalAmount:
		m.ClearTotalAmount()
		return nil
	case general.FieldSelfAmount:
		m.ClearSelfAmount()
		return nil
	case general.FieldTotalCommission:
		m.ClearTotalCommission()
		return nil
	case general.FieldSelfCommission:
		m.ClearSelfCommission()
		return nil
	}
	return fmt.Errorf("unknown General nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GeneralMutation) ResetField(name string) error {
	switch name {
	case general.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case general.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case general.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case general.FieldAppID:
		m.ResetAppID()
		return nil
	case general.FieldUserID:
		m.ResetUserID()
		return nil
	case general.FieldGoodID:
		m.ResetGoodID()
		return nil
	case general.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case general.FieldTotalUnits:
		m.ResetTotalUnits()
		return nil
	case general.FieldSelfUnits:
		m.ResetSelfUnits()
		return nil
	case general.FieldTotalAmount:
		m.ResetTotalAmount()
		return nil
	case general.FieldSelfAmount:
		m.ResetSelfAmount()
		return nil
	case general.FieldTotalCommission:
		m.ResetTotalCommission()
		return nil
	case general.FieldSelfCommission:
		m.ResetSelfCommission()
		return nil
	}
	return fmt.Errorf("unknown General field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GeneralMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GeneralMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GeneralMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GeneralMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GeneralMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GeneralMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GeneralMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown General unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GeneralMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown General edge %s", name)
}
