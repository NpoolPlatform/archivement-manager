// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/archivement-manager/pkg/db/ent/general"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GeneralCreate is the builder for creating a General entity.
type GeneralCreate struct {
	config
	mutation *GeneralMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gc *GeneralCreate) SetCreatedAt(u uint32) *GeneralCreate {
	gc.mutation.SetCreatedAt(u)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableCreatedAt(u *uint32) *GeneralCreate {
	if u != nil {
		gc.SetCreatedAt(*u)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GeneralCreate) SetUpdatedAt(u uint32) *GeneralCreate {
	gc.mutation.SetUpdatedAt(u)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableUpdatedAt(u *uint32) *GeneralCreate {
	if u != nil {
		gc.SetUpdatedAt(*u)
	}
	return gc
}

// SetDeletedAt sets the "deleted_at" field.
func (gc *GeneralCreate) SetDeletedAt(u uint32) *GeneralCreate {
	gc.mutation.SetDeletedAt(u)
	return gc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableDeletedAt(u *uint32) *GeneralCreate {
	if u != nil {
		gc.SetDeletedAt(*u)
	}
	return gc
}

// SetAppID sets the "app_id" field.
func (gc *GeneralCreate) SetAppID(u uuid.UUID) *GeneralCreate {
	gc.mutation.SetAppID(u)
	return gc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableAppID(u *uuid.UUID) *GeneralCreate {
	if u != nil {
		gc.SetAppID(*u)
	}
	return gc
}

// SetUserID sets the "user_id" field.
func (gc *GeneralCreate) SetUserID(u uuid.UUID) *GeneralCreate {
	gc.mutation.SetUserID(u)
	return gc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableUserID(u *uuid.UUID) *GeneralCreate {
	if u != nil {
		gc.SetUserID(*u)
	}
	return gc
}

// SetGoodID sets the "good_id" field.
func (gc *GeneralCreate) SetGoodID(u uuid.UUID) *GeneralCreate {
	gc.mutation.SetGoodID(u)
	return gc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableGoodID(u *uuid.UUID) *GeneralCreate {
	if u != nil {
		gc.SetGoodID(*u)
	}
	return gc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gc *GeneralCreate) SetCoinTypeID(u uuid.UUID) *GeneralCreate {
	gc.mutation.SetCoinTypeID(u)
	return gc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableCoinTypeID(u *uuid.UUID) *GeneralCreate {
	if u != nil {
		gc.SetCoinTypeID(*u)
	}
	return gc
}

// SetTotalUnits sets the "total_units" field.
func (gc *GeneralCreate) SetTotalUnits(u uint32) *GeneralCreate {
	gc.mutation.SetTotalUnits(u)
	return gc
}

// SetNillableTotalUnits sets the "total_units" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableTotalUnits(u *uint32) *GeneralCreate {
	if u != nil {
		gc.SetTotalUnits(*u)
	}
	return gc
}

// SetSelfUnits sets the "self_units" field.
func (gc *GeneralCreate) SetSelfUnits(u uint32) *GeneralCreate {
	gc.mutation.SetSelfUnits(u)
	return gc
}

// SetNillableSelfUnits sets the "self_units" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableSelfUnits(u *uint32) *GeneralCreate {
	if u != nil {
		gc.SetSelfUnits(*u)
	}
	return gc
}

// SetTotalAmount sets the "total_amount" field.
func (gc *GeneralCreate) SetTotalAmount(d decimal.Decimal) *GeneralCreate {
	gc.mutation.SetTotalAmount(d)
	return gc
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableTotalAmount(d *decimal.Decimal) *GeneralCreate {
	if d != nil {
		gc.SetTotalAmount(*d)
	}
	return gc
}

// SetSelfAmount sets the "self_amount" field.
func (gc *GeneralCreate) SetSelfAmount(d decimal.Decimal) *GeneralCreate {
	gc.mutation.SetSelfAmount(d)
	return gc
}

// SetNillableSelfAmount sets the "self_amount" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableSelfAmount(d *decimal.Decimal) *GeneralCreate {
	if d != nil {
		gc.SetSelfAmount(*d)
	}
	return gc
}

// SetTotalCommission sets the "total_commission" field.
func (gc *GeneralCreate) SetTotalCommission(d decimal.Decimal) *GeneralCreate {
	gc.mutation.SetTotalCommission(d)
	return gc
}

// SetNillableTotalCommission sets the "total_commission" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableTotalCommission(d *decimal.Decimal) *GeneralCreate {
	if d != nil {
		gc.SetTotalCommission(*d)
	}
	return gc
}

// SetSelfCommission sets the "self_commission" field.
func (gc *GeneralCreate) SetSelfCommission(d decimal.Decimal) *GeneralCreate {
	gc.mutation.SetSelfCommission(d)
	return gc
}

// SetNillableSelfCommission sets the "self_commission" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableSelfCommission(d *decimal.Decimal) *GeneralCreate {
	if d != nil {
		gc.SetSelfCommission(*d)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GeneralCreate) SetID(u uuid.UUID) *GeneralCreate {
	gc.mutation.SetID(u)
	return gc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gc *GeneralCreate) SetNillableID(u *uuid.UUID) *GeneralCreate {
	if u != nil {
		gc.SetID(*u)
	}
	return gc
}

// Mutation returns the GeneralMutation object of the builder.
func (gc *GeneralCreate) Mutation() *GeneralMutation {
	return gc.mutation
}

// Save creates the General in the database.
func (gc *GeneralCreate) Save(ctx context.Context) (*General, error) {
	var (
		err  error
		node *General
	)
	if err := gc.defaults(); err != nil {
		return nil, err
	}
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GeneralMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GeneralCreate) SaveX(ctx context.Context) *General {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GeneralCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GeneralCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GeneralCreate) defaults() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		if general.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized general.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := general.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		if general.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized general.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := general.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gc.mutation.DeletedAt(); !ok {
		if general.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized general.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := general.DefaultDeletedAt()
		gc.mutation.SetDeletedAt(v)
	}
	if _, ok := gc.mutation.AppID(); !ok {
		if general.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized general.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := general.DefaultAppID()
		gc.mutation.SetAppID(v)
	}
	if _, ok := gc.mutation.UserID(); !ok {
		if general.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized general.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := general.DefaultUserID()
		gc.mutation.SetUserID(v)
	}
	if _, ok := gc.mutation.GoodID(); !ok {
		if general.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized general.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := general.DefaultGoodID()
		gc.mutation.SetGoodID(v)
	}
	if _, ok := gc.mutation.CoinTypeID(); !ok {
		if general.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized general.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := general.DefaultCoinTypeID()
		gc.mutation.SetCoinTypeID(v)
	}
	if _, ok := gc.mutation.TotalUnits(); !ok {
		v := general.DefaultTotalUnits
		gc.mutation.SetTotalUnits(v)
	}
	if _, ok := gc.mutation.SelfUnits(); !ok {
		v := general.DefaultSelfUnits
		gc.mutation.SetSelfUnits(v)
	}
	if _, ok := gc.mutation.TotalAmount(); !ok {
		v := general.DefaultTotalAmount
		gc.mutation.SetTotalAmount(v)
	}
	if _, ok := gc.mutation.SelfAmount(); !ok {
		v := general.DefaultSelfAmount
		gc.mutation.SetSelfAmount(v)
	}
	if _, ok := gc.mutation.TotalCommission(); !ok {
		v := general.DefaultTotalCommission
		gc.mutation.SetTotalCommission(v)
	}
	if _, ok := gc.mutation.SelfCommission(); !ok {
		v := general.DefaultSelfCommission
		gc.mutation.SetSelfCommission(v)
	}
	if _, ok := gc.mutation.ID(); !ok {
		if general.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized general.DefaultID (forgotten import ent/runtime?)")
		}
		v := general.DefaultID()
		gc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gc *GeneralCreate) check() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "General.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "General.updated_at"`)}
	}
	if _, ok := gc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "General.deleted_at"`)}
	}
	return nil
}

func (gc *GeneralCreate) sqlSave(ctx context.Context) (*General, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gc *GeneralCreate) createSpec() (*General, *sqlgraph.CreateSpec) {
	var (
		_node = &General{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: general.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: general.FieldID,
			},
		}
	)
	_spec.OnConflict = gc.conflict
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: general.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := gc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: general.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := gc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: general.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := gc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: general.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := gc.mutation.TotalUnits(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldTotalUnits,
		})
		_node.TotalUnits = value
	}
	if value, ok := gc.mutation.SelfUnits(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: general.FieldSelfUnits,
		})
		_node.SelfUnits = value
	}
	if value, ok := gc.mutation.TotalAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: general.FieldTotalAmount,
		})
		_node.TotalAmount = value
	}
	if value, ok := gc.mutation.SelfAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: general.FieldSelfAmount,
		})
		_node.SelfAmount = value
	}
	if value, ok := gc.mutation.TotalCommission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: general.FieldTotalCommission,
		})
		_node.TotalCommission = value
	}
	if value, ok := gc.mutation.SelfCommission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: general.FieldSelfCommission,
		})
		_node.SelfCommission = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.General.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GeneralUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gc *GeneralCreate) OnConflict(opts ...sql.ConflictOption) *GeneralUpsertOne {
	gc.conflict = opts
	return &GeneralUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.General.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gc *GeneralCreate) OnConflictColumns(columns ...string) *GeneralUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GeneralUpsertOne{
		create: gc,
	}
}

type (
	// GeneralUpsertOne is the builder for "upsert"-ing
	//  one General node.
	GeneralUpsertOne struct {
		create *GeneralCreate
	}

	// GeneralUpsert is the "OnConflict" setter.
	GeneralUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GeneralUpsert) SetCreatedAt(v uint32) *GeneralUpsert {
	u.Set(general.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateCreatedAt() *GeneralUpsert {
	u.SetExcluded(general.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GeneralUpsert) AddCreatedAt(v uint32) *GeneralUpsert {
	u.Add(general.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GeneralUpsert) SetUpdatedAt(v uint32) *GeneralUpsert {
	u.Set(general.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateUpdatedAt() *GeneralUpsert {
	u.SetExcluded(general.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GeneralUpsert) AddUpdatedAt(v uint32) *GeneralUpsert {
	u.Add(general.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GeneralUpsert) SetDeletedAt(v uint32) *GeneralUpsert {
	u.Set(general.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateDeletedAt() *GeneralUpsert {
	u.SetExcluded(general.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GeneralUpsert) AddDeletedAt(v uint32) *GeneralUpsert {
	u.Add(general.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *GeneralUpsert) SetAppID(v uuid.UUID) *GeneralUpsert {
	u.Set(general.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateAppID() *GeneralUpsert {
	u.SetExcluded(general.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *GeneralUpsert) ClearAppID() *GeneralUpsert {
	u.SetNull(general.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GeneralUpsert) SetUserID(v uuid.UUID) *GeneralUpsert {
	u.Set(general.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateUserID() *GeneralUpsert {
	u.SetExcluded(general.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *GeneralUpsert) ClearUserID() *GeneralUpsert {
	u.SetNull(general.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GeneralUpsert) SetGoodID(v uuid.UUID) *GeneralUpsert {
	u.Set(general.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateGoodID() *GeneralUpsert {
	u.SetExcluded(general.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GeneralUpsert) ClearGoodID() *GeneralUpsert {
	u.SetNull(general.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GeneralUpsert) SetCoinTypeID(v uuid.UUID) *GeneralUpsert {
	u.Set(general.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateCoinTypeID() *GeneralUpsert {
	u.SetExcluded(general.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GeneralUpsert) ClearCoinTypeID() *GeneralUpsert {
	u.SetNull(general.FieldCoinTypeID)
	return u
}

// SetTotalUnits sets the "total_units" field.
func (u *GeneralUpsert) SetTotalUnits(v uint32) *GeneralUpsert {
	u.Set(general.FieldTotalUnits, v)
	return u
}

// UpdateTotalUnits sets the "total_units" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateTotalUnits() *GeneralUpsert {
	u.SetExcluded(general.FieldTotalUnits)
	return u
}

// AddTotalUnits adds v to the "total_units" field.
func (u *GeneralUpsert) AddTotalUnits(v uint32) *GeneralUpsert {
	u.Add(general.FieldTotalUnits, v)
	return u
}

// ClearTotalUnits clears the value of the "total_units" field.
func (u *GeneralUpsert) ClearTotalUnits() *GeneralUpsert {
	u.SetNull(general.FieldTotalUnits)
	return u
}

// SetSelfUnits sets the "self_units" field.
func (u *GeneralUpsert) SetSelfUnits(v uint32) *GeneralUpsert {
	u.Set(general.FieldSelfUnits, v)
	return u
}

// UpdateSelfUnits sets the "self_units" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateSelfUnits() *GeneralUpsert {
	u.SetExcluded(general.FieldSelfUnits)
	return u
}

// AddSelfUnits adds v to the "self_units" field.
func (u *GeneralUpsert) AddSelfUnits(v uint32) *GeneralUpsert {
	u.Add(general.FieldSelfUnits, v)
	return u
}

// ClearSelfUnits clears the value of the "self_units" field.
func (u *GeneralUpsert) ClearSelfUnits() *GeneralUpsert {
	u.SetNull(general.FieldSelfUnits)
	return u
}

// SetTotalAmount sets the "total_amount" field.
func (u *GeneralUpsert) SetTotalAmount(v decimal.Decimal) *GeneralUpsert {
	u.Set(general.FieldTotalAmount, v)
	return u
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateTotalAmount() *GeneralUpsert {
	u.SetExcluded(general.FieldTotalAmount)
	return u
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *GeneralUpsert) ClearTotalAmount() *GeneralUpsert {
	u.SetNull(general.FieldTotalAmount)
	return u
}

// SetSelfAmount sets the "self_amount" field.
func (u *GeneralUpsert) SetSelfAmount(v decimal.Decimal) *GeneralUpsert {
	u.Set(general.FieldSelfAmount, v)
	return u
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateSelfAmount() *GeneralUpsert {
	u.SetExcluded(general.FieldSelfAmount)
	return u
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *GeneralUpsert) ClearSelfAmount() *GeneralUpsert {
	u.SetNull(general.FieldSelfAmount)
	return u
}

// SetTotalCommission sets the "total_commission" field.
func (u *GeneralUpsert) SetTotalCommission(v decimal.Decimal) *GeneralUpsert {
	u.Set(general.FieldTotalCommission, v)
	return u
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateTotalCommission() *GeneralUpsert {
	u.SetExcluded(general.FieldTotalCommission)
	return u
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *GeneralUpsert) ClearTotalCommission() *GeneralUpsert {
	u.SetNull(general.FieldTotalCommission)
	return u
}

// SetSelfCommission sets the "self_commission" field.
func (u *GeneralUpsert) SetSelfCommission(v decimal.Decimal) *GeneralUpsert {
	u.Set(general.FieldSelfCommission, v)
	return u
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *GeneralUpsert) UpdateSelfCommission() *GeneralUpsert {
	u.SetExcluded(general.FieldSelfCommission)
	return u
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *GeneralUpsert) ClearSelfCommission() *GeneralUpsert {
	u.SetNull(general.FieldSelfCommission)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.General.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(general.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GeneralUpsertOne) UpdateNewValues() *GeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(general.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.General.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GeneralUpsertOne) Ignore() *GeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GeneralUpsertOne) DoNothing() *GeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GeneralCreate.OnConflict
// documentation for more info.
func (u *GeneralUpsertOne) Update(set func(*GeneralUpsert)) *GeneralUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GeneralUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GeneralUpsertOne) SetCreatedAt(v uint32) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GeneralUpsertOne) AddCreatedAt(v uint32) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateCreatedAt() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GeneralUpsertOne) SetUpdatedAt(v uint32) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GeneralUpsertOne) AddUpdatedAt(v uint32) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateUpdatedAt() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GeneralUpsertOne) SetDeletedAt(v uint32) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GeneralUpsertOne) AddDeletedAt(v uint32) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateDeletedAt() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *GeneralUpsertOne) SetAppID(v uuid.UUID) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateAppID() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *GeneralUpsertOne) ClearAppID() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GeneralUpsertOne) SetUserID(v uuid.UUID) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateUserID() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GeneralUpsertOne) ClearUserID() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GeneralUpsertOne) SetGoodID(v uuid.UUID) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateGoodID() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GeneralUpsertOne) ClearGoodID() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GeneralUpsertOne) SetCoinTypeID(v uuid.UUID) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateCoinTypeID() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GeneralUpsertOne) ClearCoinTypeID() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetTotalUnits sets the "total_units" field.
func (u *GeneralUpsertOne) SetTotalUnits(v uint32) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetTotalUnits(v)
	})
}

// AddTotalUnits adds v to the "total_units" field.
func (u *GeneralUpsertOne) AddTotalUnits(v uint32) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.AddTotalUnits(v)
	})
}

// UpdateTotalUnits sets the "total_units" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateTotalUnits() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateTotalUnits()
	})
}

// ClearTotalUnits clears the value of the "total_units" field.
func (u *GeneralUpsertOne) ClearTotalUnits() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearTotalUnits()
	})
}

// SetSelfUnits sets the "self_units" field.
func (u *GeneralUpsertOne) SetSelfUnits(v uint32) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetSelfUnits(v)
	})
}

// AddSelfUnits adds v to the "self_units" field.
func (u *GeneralUpsertOne) AddSelfUnits(v uint32) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.AddSelfUnits(v)
	})
}

// UpdateSelfUnits sets the "self_units" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateSelfUnits() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateSelfUnits()
	})
}

// ClearSelfUnits clears the value of the "self_units" field.
func (u *GeneralUpsertOne) ClearSelfUnits() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearSelfUnits()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *GeneralUpsertOne) SetTotalAmount(v decimal.Decimal) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateTotalAmount() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateTotalAmount()
	})
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *GeneralUpsertOne) ClearTotalAmount() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearTotalAmount()
	})
}

// SetSelfAmount sets the "self_amount" field.
func (u *GeneralUpsertOne) SetSelfAmount(v decimal.Decimal) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetSelfAmount(v)
	})
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateSelfAmount() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateSelfAmount()
	})
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *GeneralUpsertOne) ClearSelfAmount() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearSelfAmount()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *GeneralUpsertOne) SetTotalCommission(v decimal.Decimal) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateTotalCommission() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateTotalCommission()
	})
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *GeneralUpsertOne) ClearTotalCommission() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearTotalCommission()
	})
}

// SetSelfCommission sets the "self_commission" field.
func (u *GeneralUpsertOne) SetSelfCommission(v decimal.Decimal) *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.SetSelfCommission(v)
	})
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *GeneralUpsertOne) UpdateSelfCommission() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateSelfCommission()
	})
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *GeneralUpsertOne) ClearSelfCommission() *GeneralUpsertOne {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearSelfCommission()
	})
}

// Exec executes the query.
func (u *GeneralUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GeneralCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GeneralUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GeneralUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GeneralUpsertOne.ID is not supported by MySQL driver. Use GeneralUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GeneralUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GeneralCreateBulk is the builder for creating many General entities in bulk.
type GeneralCreateBulk struct {
	config
	builders []*GeneralCreate
	conflict []sql.ConflictOption
}

// Save creates the General entities in the database.
func (gcb *GeneralCreateBulk) Save(ctx context.Context) ([]*General, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*General, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GeneralMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GeneralCreateBulk) SaveX(ctx context.Context) []*General {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GeneralCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GeneralCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.General.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GeneralUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gcb *GeneralCreateBulk) OnConflict(opts ...sql.ConflictOption) *GeneralUpsertBulk {
	gcb.conflict = opts
	return &GeneralUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.General.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gcb *GeneralCreateBulk) OnConflictColumns(columns ...string) *GeneralUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GeneralUpsertBulk{
		create: gcb,
	}
}

// GeneralUpsertBulk is the builder for "upsert"-ing
// a bulk of General nodes.
type GeneralUpsertBulk struct {
	create *GeneralCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.General.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(general.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GeneralUpsertBulk) UpdateNewValues() *GeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(general.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.General.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GeneralUpsertBulk) Ignore() *GeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GeneralUpsertBulk) DoNothing() *GeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GeneralCreateBulk.OnConflict
// documentation for more info.
func (u *GeneralUpsertBulk) Update(set func(*GeneralUpsert)) *GeneralUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GeneralUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GeneralUpsertBulk) SetCreatedAt(v uint32) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GeneralUpsertBulk) AddCreatedAt(v uint32) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateCreatedAt() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GeneralUpsertBulk) SetUpdatedAt(v uint32) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GeneralUpsertBulk) AddUpdatedAt(v uint32) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateUpdatedAt() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GeneralUpsertBulk) SetDeletedAt(v uint32) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GeneralUpsertBulk) AddDeletedAt(v uint32) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateDeletedAt() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *GeneralUpsertBulk) SetAppID(v uuid.UUID) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateAppID() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *GeneralUpsertBulk) ClearAppID() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GeneralUpsertBulk) SetUserID(v uuid.UUID) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateUserID() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GeneralUpsertBulk) ClearUserID() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GeneralUpsertBulk) SetGoodID(v uuid.UUID) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateGoodID() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GeneralUpsertBulk) ClearGoodID() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GeneralUpsertBulk) SetCoinTypeID(v uuid.UUID) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateCoinTypeID() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *GeneralUpsertBulk) ClearCoinTypeID() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetTotalUnits sets the "total_units" field.
func (u *GeneralUpsertBulk) SetTotalUnits(v uint32) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetTotalUnits(v)
	})
}

// AddTotalUnits adds v to the "total_units" field.
func (u *GeneralUpsertBulk) AddTotalUnits(v uint32) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.AddTotalUnits(v)
	})
}

// UpdateTotalUnits sets the "total_units" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateTotalUnits() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateTotalUnits()
	})
}

// ClearTotalUnits clears the value of the "total_units" field.
func (u *GeneralUpsertBulk) ClearTotalUnits() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearTotalUnits()
	})
}

// SetSelfUnits sets the "self_units" field.
func (u *GeneralUpsertBulk) SetSelfUnits(v uint32) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetSelfUnits(v)
	})
}

// AddSelfUnits adds v to the "self_units" field.
func (u *GeneralUpsertBulk) AddSelfUnits(v uint32) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.AddSelfUnits(v)
	})
}

// UpdateSelfUnits sets the "self_units" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateSelfUnits() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateSelfUnits()
	})
}

// ClearSelfUnits clears the value of the "self_units" field.
func (u *GeneralUpsertBulk) ClearSelfUnits() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearSelfUnits()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *GeneralUpsertBulk) SetTotalAmount(v decimal.Decimal) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateTotalAmount() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateTotalAmount()
	})
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (u *GeneralUpsertBulk) ClearTotalAmount() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearTotalAmount()
	})
}

// SetSelfAmount sets the "self_amount" field.
func (u *GeneralUpsertBulk) SetSelfAmount(v decimal.Decimal) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetSelfAmount(v)
	})
}

// UpdateSelfAmount sets the "self_amount" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateSelfAmount() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateSelfAmount()
	})
}

// ClearSelfAmount clears the value of the "self_amount" field.
func (u *GeneralUpsertBulk) ClearSelfAmount() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearSelfAmount()
	})
}

// SetTotalCommission sets the "total_commission" field.
func (u *GeneralUpsertBulk) SetTotalCommission(v decimal.Decimal) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetTotalCommission(v)
	})
}

// UpdateTotalCommission sets the "total_commission" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateTotalCommission() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateTotalCommission()
	})
}

// ClearTotalCommission clears the value of the "total_commission" field.
func (u *GeneralUpsertBulk) ClearTotalCommission() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearTotalCommission()
	})
}

// SetSelfCommission sets the "self_commission" field.
func (u *GeneralUpsertBulk) SetSelfCommission(v decimal.Decimal) *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.SetSelfCommission(v)
	})
}

// UpdateSelfCommission sets the "self_commission" field to the value that was provided on create.
func (u *GeneralUpsertBulk) UpdateSelfCommission() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.UpdateSelfCommission()
	})
}

// ClearSelfCommission clears the value of the "self_commission" field.
func (u *GeneralUpsertBulk) ClearSelfCommission() *GeneralUpsertBulk {
	return u.Update(func(s *GeneralUpsert) {
		s.ClearSelfCommission()
	})
}

// Exec executes the query.
func (u *GeneralUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GeneralCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GeneralCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GeneralUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
